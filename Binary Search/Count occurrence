package BinarySearch;

public class CountOccurence {
 //First occurrence from left
	static int LeftOccurence(int [] a , int key) {
		int l = 0;
		int r = a.length-1;
		int ans = -1;
		while(l<=r) {
			int mid  = (l + r) / 2 ;
			if(a[mid] == key) {
				ans = mid;
				r = mid - 1;
			}
			else if(key > a[mid]) {
				l = mid + 1;
			}else {
				r = mid - 1;
			}
		}
		return ans;
	}
  
  //First occurrence from right
static int  RightOccurence(int a[] , int key) {
		
		int l = 0;
		int r = a.length-1;
		int ans = -1;
		while(l<=r){
			int mid = (l + r) / 2;
			if(a[mid]== key) { 
				ans = mid;
				l=mid+1;
			}
			else if(key > a[mid]) {
				l = mid + 1;
			}else {
				r = mid - 1;
			}
		}
		return ans;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int a [] = {1,2,2,4,4,4,5,9,9,11,11,11,14};
		 int key = 4;
		 int l = LeftOccurence(a,key);
		 int r = RightOccurence(a,key);
		  //Total occurrence
		System.out.println((r-l)+1);

	}

}
