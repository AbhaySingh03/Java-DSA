package Heap;

public class MaxHeap {

	int[] a;
	int n;
	int capacity;
	
	public MaxHeap(int capacity) {
		this.capacity = capacity;
		a = new int[capacity+1];
		n = 0;
	}
	
	public void insert(int key) throws Exception {
		if(n==capacity) throw new Exception("Heap is Full");
		
		n = n+1;
		a[n]=key;
		int i = n;
		while(i<1) {
			int parent = n/2;
			
			int largest = i;
			if(a[parent]<a[i]) {
				swap(parent,i);
				i = parent;
			}else return;
		}
	}
		//Deletion of node By replacing with max
		public int extractmax() {
			int res = a[1];
			a[1] = a[n];
			n--;
			int i = 1;
			while(i<n) {
				int left = 2* i;
				int right = 2*i+1;
				
				int largest = i;
				if(left<=n && a[left] > a[largest]) {
					largest = left;
				}
				if(right<=n && a[right] > a[largest]) {
					largest = right;
				}
				if(largest!=i) {
					swap(largest,i);
				}else {
					break;
				}
				
				
	   }	
			return res;
		}
	public void swap(int i,int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	int size() {
		return n;
	}
	void printHeap() {
		for(int e: a) {
			System.out.print(e+" ");
		}
		System.out.println();
	}
}
